
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

@piece( DefaultHeaderVS )
	@property( hlms_skeleton )
		#define worldViewMat passBuf.view
	@else
		#define worldViewMat worldView
	@end

	@insertpiece( Common_Matrix_DeclUnpackMatrix4x4 )
	@insertpiece( Common_Matrix_DeclUnpackMatrix4x3 )

	// START UNIFORM DECLARATION
	@insertpiece( PassStructDecl )
	@property( hlms_skeleton || hlms_shadowcaster )@insertpiece( InstanceStructDecl )@end
	@insertpiece( custom_vs_uniformStructDeclaration )
	// END UNIFORM DECLARATION

	@property( hlms_qtangent )
		@insertpiece( DeclQuat_xAxis )
		@property( normal_map )
			@insertpiece( DeclQuat_yAxis )
		@end
	@end
@end

@property( !hlms_skeleton )
	@piece( local_vertex )inVs_vertex@end
	@piece( local_normal )normal@end
	@piece( local_tangent )tangent@end
@else
	@piece( local_vertex )worldPos@end
	@piece( local_normal )worldNorm@end
	@piece( local_tangent )worldTang@end
@end

@property( hlms_skeleton )
@piece( SkeletonTransform )
	uint _idx = (inVs_blendIndices[0] << 1u) + inVs_blendIndices[0]; //inVs_blendIndices[0] * 3u; a 32-bit int multiply is 4 cycles on GCN! (and mul24 is not exposed to GLSL...)
	uint matStart = worldMaterialIdx[inVs_drawId].x >> 9u;
	float4 worldMat[3];
	worldMat[0] = bufferFetch( worldMatBuf, int(matStart + _idx + 0u) );
	worldMat[1] = bufferFetch( worldMatBuf, int(matStart + _idx + 1u) );
	worldMat[2] = bufferFetch( worldMatBuf, int(matStart + _idx + 2u) );
	float4 worldPos;
	worldPos.x = dot( worldMat[0], inVs_vertex );
	worldPos.y = dot( worldMat[1], inVs_vertex );
	worldPos.z = dot( worldMat[2], inVs_vertex );
	worldPos.xyz *= inVs_blendWeights[0];
	@property( hlms_normal || hlms_qtangent )
		float3 worldNorm;
		worldNorm.x = dot( worldMat[0].xyz, normal );
		worldNorm.y = dot( worldMat[1].xyz, normal );
		worldNorm.z = dot( worldMat[2].xyz, normal );
		worldNorm *= inVs_blendWeights[0];
	@end
	@property( normal_map )
		float3 worldTang;
		worldTang.x = dot( worldMat[0].xyz, tangent );
		worldTang.y = dot( worldMat[1].xyz, tangent );
		worldTang.z = dot( worldMat[2].xyz, tangent );
		worldTang *= inVs_blendWeights[0];
	@end

	@psub( NeedsMoreThan1BonePerVertex, hlms_bones_per_vertex, 1 )
	@property( NeedsMoreThan1BonePerVertex )
		float4 tmp;
		tmp.w = 1.0;
	@end //!NeedsMoreThan1BonePerVertex
	@foreach( hlms_bones_per_vertex, n, 1 )
		_idx = (inVs_blendIndices[@n] << 1u) + inVs_blendIndices[@n]; //inVs_blendIndices[@n] * 3; a 32-bit int multiply is 4 cycles on GCN! (and mul24 is not exposed to GLSL...)
		worldMat[0] = bufferFetch( worldMatBuf, int(matStart + _idx + 0u) );
		worldMat[1] = bufferFetch( worldMatBuf, int(matStart + _idx + 1u) );
		worldMat[2] = bufferFetch( worldMatBuf, int(matStart + _idx + 2u) );
		tmp.x = dot( worldMat[0], inVs_vertex );
		tmp.y = dot( worldMat[1], inVs_vertex );
		tmp.z = dot( worldMat[2], inVs_vertex );
		worldPos.xyz += (tmp * inVs_blendWeights[@n]).xyz;
		@property( hlms_normal || hlms_qtangent )
			tmp.x = dot( worldMat[0].xyz, normal );
			tmp.y = dot( worldMat[1].xyz, normal );
			tmp.z = dot( worldMat[2].xyz, normal );
			worldNorm += tmp.xyz * inVs_blendWeights[@n];
		@end
		@property( normal_map )
			tmp.x = dot( worldMat[0].xyz, tangent );
			tmp.y = dot( worldMat[1].xyz, tangent );
			tmp.z = dot( worldMat[2].xyz, tangent );
			worldTang += tmp.xyz * inVs_blendWeights[@n];
		@end
	@end

	worldPos.w = 1.0;
@end // SkeletonTransform
@end // !hlms_skeleton

@piece( CalculatePsPos )mul( @insertpiece(local_vertex), worldViewMat ).xyz@end

@piece( VertexTransform )
	@insertpiece( custom_vs_preTransform )
	//Lighting is in view space
	@property( hlms_normal || hlms_qtangent )	outVs.pos		= @insertpiece( CalculatePsPos );@end
	@property( hlms_normal || hlms_qtangent )	outVs.normal	= mul( @insertpiece(local_normal), toFloat3x3( worldViewMat ) );@end
	@property( normal_map )						outVs.tangent	= mul( @insertpiece(local_tangent), toFloat3x3( worldViewMat ) );@end
	@property( !hlms_dual_paraboloid_mapping )
        @property( !hlms_use_uv_baking )
			outVs_Position = mul( worldPos, passBuf.viewProj );
		@else
			outVs_Position.xy = inVs_uv@value( hlms_uv_baking ).xy * 2.0f - 1.0f + passBuf.pixelOffset2x.xy;
			@property( !hlms_forwardplus_flipY || syntax != glsl )
				outVs_Position.y = -outVs_Position.y;
			@end
			outVs_Position.zw = float2( 0.0f, 1.0f );
		@end
	@else
		//Dual Paraboloid Mapping
		outVs_Position.w	= 1.0f;
		@property( hlms_normal || hlms_qtangent )outVs_Position.xyz	= outVs.pos;@end
		@property( !hlms_normal && !hlms_qtangent )outVs_Position.xyz	= @insertpiece( CalculatePsPos );@end
		float L = length( outVs_Position.xyz );
		outVs_Position.z	+= 1.0f;
		outVs_Position.xy	/= outVs_Position.z;
		outVs_Position.z	= (L - NearPlane) / (FarPlane - NearPlane);
	@end
@end

@piece( DefaultBodyVS )
	@property( !hlms_skeleton )
		ogre_float4x3 worldMat = UNPACK_MAT4x3( worldMatBuf, inVs_drawId @property( !hlms_shadowcaster )<< 1u@end );
		@property( hlms_normal || hlms_qtangent )
			float4x4 worldView = UNPACK_MAT4( worldMatBuf, (inVs_drawId << 1u) + 1u );
		@end

		float4 worldPos = float4( mul(inVs_vertex, worldMat).xyz, 1.0f );
	@end

	@property( hlms_qtangent )
		//Decode qTangent to TBN with reflection
		float3 normal		= xAxis( normalize( inVs_qtangent ) );
		@property( normal_map )
			float3 tangent	= yAxis( inVs_qtangent );
			outVs.biNormalReflection = sign( inVs_qtangent.w ); //We ensure in C++ qtangent.w is never 0
		@end
	@end

	@insertpiece( SkeletonTransform )
	@insertpiece( VertexTransform )

	@insertpiece( DoShadowReceiveVS )
	@insertpiece( DoShadowCasterVS )

	/// hlms_uv_count will be 0 on shadow caster passes w/out alpha test
	@foreach( hlms_uv_count, n )
		outVs.uv@n = inVs_uv@n;@end

@property( syntax != metal )
	@property( (!hlms_shadowcaster || alpha_test) && !lower_gpu_overhead )
		outVs.drawId = inVs_drawId;
	@end
@else
	@property( (!hlms_shadowcaster || alpha_test) && !lower_gpu_overhead )
		outVs.materialId = worldMaterialIdx[inVs_drawId].x & 0x1FFu;
	@end

	@property( hlms_fine_light_mask || hlms_forwardplus_fine_light_mask )
		outVs.objLightMask = worldMaterialIdx[inVs_drawId].z;
	@end

	@property( use_planar_reflections )
		outVs.planarReflectionIdx = (ushort)(worldMaterialIdx[inVs_drawId].w);
	@end
@end

	@property( hlms_use_prepass_msaa > 1 )
		outVs.zwDepth.xy = outVs_Position.zw;
	@end

	@property( hlms_global_clip_planes )
		outVs_clipDistance0 = dot( float4( worldPos.xyz, 1.0 ), passBuf.clipPlane0.xyzw );
	@end
@end
